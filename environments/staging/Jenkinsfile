pipeline {
	agent any

  environment {
    deploymentName = "googleservice-depl"
		APP_NAME="thecodingadventure/googleservice"
		IMAGE_TAG = "${GIT_COMMIT}"
    applicationURL = "http://178.128.101.12"
    applicationURI = "api/google/search/trend/google"
  }

  stages {
    stage('clean workspace') {
        steps {
          cleanWs()
        }
    }

    stage('Checkout') {
			steps {
				checkout scm
			}
    }

    stage('Integration Tests - Staging') {
      steps {
        dir("environments/staging") {
          script {
            try {
              withKubeConfig([credentialsId: 'kubeconfig']) {
                sh "bash integration-test.sh"
              }
            } catch (e) {
              // reversioning to previous commit
              git branch: 'main', credentialsId: 'github', url: 'https://github.com/ekulfier/gitops-vizelog'
              def previousCommit = sh(returnStdout: true, script: 'git rev-parse HEAD^').trim()
              withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                sh "git checkout ${previousCommit}"
              }
              throw e
            }
          }
        }
      }
    }

    stage('Prompte to PROD?') {
      steps {
        timeout(time: 2, unit: 'DAYS') {
          input 'Do you want to Approve the Deployment to Production Environment/Namespace?'
        }
      }
    }

    stage('K8S Deployment - PROD') {
        
      stages {
        stage("Checkout from SCM") {
          steps {
            git branch: 'main', credentialsId: 'github', url: 'https://github.com/ekulfier/gitops-vizelog'
          }
        }

        stage("Update the Deployment Tags") {
          steps {
              dir("apps/prod") {
                  sh """
                      cat google-deployment.yaml
                      sed -i 's#${APP_NAME}.*#${APP_NAME}:${IMAGE_TAG}#g' google-deployment.yaml
                      cat google-deployment.yaml
                  """
              }
          }
        }

        stage("Push the changed deployment file to Git") {
          steps {
            dir("apps/prod") {
              sh """
                git config --global user.name "ekulfier"
                git config --global user.email "sorrachak.holy201@gmail.com"
                git add google-deployment.yaml
                git commit -m "Updated Deployment Manifest"
              """
              withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                sh "git push https://github.com/ekulfier/gitops-vizelog main"
              }
            }   
          }
        }

        stage("Rollout Status") {
          steps {
            dir("environments/staging") {
              script {
                // reversioning to previous commit
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/ekulfier/gitops-vizelog'
                def previousCommit = sh(returnStdout: true, script: 'git rev-parse HEAD^').trim()
                withKubeConfig([credentialsId: 'kubeconfig']) {
                  withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                    sh '''
                      #!/bin/bash
                      sleep 60s

                      if [[ $(kubectl -n prod-vizelog rollout status deploy ${deploymentName} --timeout 10s) != *"successfully rolled out"* ]]; 
                      then     
                        echo "Deployment ${deploymentName} Rollout has Failed"
                        git checkout ${previousCommit}
                        exit 1;
                      else
                        echo "Deployment ${deploymentName} Rollout is Success"
                      fi
                    ''' 
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      emailext attachLog: true,
        subject: "'${currentBuild.result}'",
        body: "Project: ${env.JOB_NAME}<br/>" +
            "Build Number: ${env.BUILD_NUMBER}<br/>" +
            "URL: ${env.BUILD_URL}<br/>",
        to: 'the.coding.nothingdev@gmail.com',                          
        attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
    }
  }
}
